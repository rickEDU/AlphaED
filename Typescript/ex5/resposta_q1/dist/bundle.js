/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/projeto.ts":
/*!************************!*\
  !*** ./src/projeto.ts ***!
  \************************/
/***/ (function() {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass Validator {\n    constructor(data) {\n        this.data = data;\n    }\n}\nclass StringValidator extends Validator {\n    constructor(data) {\n        if (typeof data !== \"string\") {\n            throw new Error(\"O tipo est치 errado\");\n        }\n        super(data);\n    }\n}\nclass NumberValidator extends Validator {\n    constructor(data) {\n        if (typeof data !== \"number\") {\n            throw new Error(\"O tipo est치 errado\");\n        }\n        super(data);\n    }\n}\nclass BooleanValidator extends Validator {\n    constructor(data) {\n        if (typeof data !== \"boolean\") {\n            throw new Error(\"O tipo est치 errado\");\n        }\n        super(data);\n    }\n}\nclass RegexValidator extends StringValidator {\n    constructor(data, data_regex) {\n        super(data);\n        this.data_regex = new RegExp('');\n        this.data_regex = data_regex;\n        if (!this.regex.test(data)) {\n            throw new Error(\"O tipo est치 errado\");\n        }\n        else {\n            console.log('deu certo!');\n        }\n    }\n    get regex() {\n        return this.data_regex;\n    }\n}\nclass EmailValidator extends RegexValidator {\n    constructor(data) {\n        const data_regex = new RegExp(/^(\\w{1,}@\\w{1,}\\.(\\w{3})(\\.\\w{2}){0,1})$/gim);\n        super(data, data_regex);\n    }\n}\nclass PasswordValidator extends RegexValidator {\n    constructor(data) {\n        const data_regex = new RegExp(/^\\w{1,}$/gim);\n        super(data, data_regex);\n    }\n}\nclass NameValidator extends RegexValidator {\n    constructor(data) {\n        const data_regex = new RegExp(/^([a-z]{1,})([ ]{1}[a-z]{1,}){0,}$/gim);\n        super(data, data_regex);\n    }\n}\nclass EmailInput extends HTMLElement {\n    constructor() {\n        super();\n        const shadow = this.attachShadow({ mode: \"open\" });\n        const input = document.createElement('input');\n        input.type = 'text';\n        input.className = 'emailInput';\n        input.placeholder = \"Digite seu email.\";\n        input.onchange = () => {\n            try {\n                new EmailValidator(input.value);\n            }\n            catch (error) {\n                input.value = ``;\n                console.log(error);\n            }\n        };\n        shadow.append(input);\n    }\n}\nclass NameInput extends HTMLElement {\n    constructor() {\n        super();\n        const shadow = this.attachShadow({ mode: 'open' });\n        const input = document.createElement('input');\n        input.type = 'text';\n        input.className = 'nameInput';\n        input.placeholder = \"Digite seu nome.\";\n        input.onchange = () => {\n            try {\n                new NameValidator(input.value);\n            }\n            catch (error) {\n                input.value = ``;\n                console.log(error);\n            }\n        };\n        shadow.appendChild(input);\n    }\n}\nclass PasswordInput extends HTMLElement {\n    constructor() {\n        super();\n        const shadow = this.attachShadow({ mode: \"open\" });\n        const input = document.createElement('input');\n        input.type = 'text';\n        input.className = 'passwordInput';\n        input.placeholder = \"Digite sua senha.\";\n        input.onchange = () => {\n            try {\n                new PasswordValidator(input.value);\n            }\n            catch (error) {\n                input.value = ``;\n                console.log(error);\n            }\n        };\n        shadow.append(input);\n    }\n}\ncustomElements.define(\"email-input\", EmailInput);\ncustomElements.define(\"name-input\", NameInput);\ncustomElements.define(\"passwd-input\", PasswordInput);\nconst create = document.querySelector('.create');\nconst login = document.querySelector('.login');\nconst update = document.querySelector('.update');\ncreate === null || create === void 0 ? void 0 : create.addEventListener('click', createAcount);\nlogin === null || login === void 0 ? void 0 : login.addEventListener('click', loginAcount);\nupdate === null || update === void 0 ? void 0 : update.addEventListener('click', updateAcount);\nfunction createAcount() {\n    var _a, _b, _c;\n    return __awaiter(this, void 0, void 0, function* () {\n        const button = document.querySelector('.create');\n        button.disabled = true;\n        const shadow_email = (_a = document.querySelector('email-input')) === null || _a === void 0 ? void 0 : _a.shadowRoot;\n        const email = shadow_email === null || shadow_email === void 0 ? void 0 : shadow_email.querySelector('.emailInput');\n        // valor do input nome\n        const shadow_name = (_b = document.querySelector(\"name-input\")) === null || _b === void 0 ? void 0 : _b.shadowRoot;\n        const name = shadow_name === null || shadow_name === void 0 ? void 0 : shadow_name.querySelector('.nameInput');\n        // valor do input senha\n        const shadow_password = (_c = document.querySelector('passwd-input')) === null || _c === void 0 ? void 0 : _c.shadowRoot;\n        const password = shadow_password === null || shadow_password === void 0 ? void 0 : shadow_password.querySelector('.passwordInput');\n        try {\n            if (email.value.length == 0) {\n                throw new Error('Digite um email!');\n            }\n            if (name.value.length == 0) {\n                throw new Error('Digite um nome!');\n            }\n            if (password.value.length == 0) {\n                throw new Error('Digite uma senha!');\n            }\n            const body = {\n                email: email.value,\n                name: name.value,\n                password: password.value\n            };\n            yield fetch_create(body);\n            button.disabled = false;\n        }\n        catch (error) {\n            button.disabled = false;\n            const message = document.querySelector('#message');\n            message.innerHTML = error;\n            message.style.color = 'red';\n            setTimeout(() => {\n                message.innerHTML = '';\n            }, 4000);\n            console.log(error);\n        }\n    });\n}\nfunction updateAcount() {\n    var _a, _b, _c;\n    return __awaiter(this, void 0, void 0, function* () {\n        const button = document.querySelector('.update');\n        button.disabled = true;\n        // valor do input da email\n        const shadow_email = (_a = document.querySelector('email-input')) === null || _a === void 0 ? void 0 : _a.shadowRoot;\n        const email = shadow_email === null || shadow_email === void 0 ? void 0 : shadow_email.querySelector('.emailInput');\n        // valor do input nome\n        const shadow_name = (_b = document.querySelector(\"name-input\")) === null || _b === void 0 ? void 0 : _b.shadowRoot;\n        const name = shadow_name === null || shadow_name === void 0 ? void 0 : shadow_name.querySelector('.nameInput');\n        // valor do input senha\n        const shadow_password = (_c = document.querySelector('passwd-input')) === null || _c === void 0 ? void 0 : _c.shadowRoot;\n        const password = shadow_password === null || shadow_password === void 0 ? void 0 : shadow_password.querySelector('.passwordInput');\n        try {\n            if (email.value.length == 0) {\n                throw new Error('Digite um email!');\n            }\n            if (name.value.length == 0) {\n                throw new Error('Digite um nome!');\n            }\n            if (password.value.length == 0) {\n                throw new Error('Digite uma senha!');\n            }\n            const body = {\n                email: email.value,\n                name: name.value,\n                password: password.value\n            };\n            yield fetch_update(body);\n            button.disabled = false;\n        }\n        catch (error) {\n            button.disabled = false;\n            const message = document.querySelector('#message');\n            message.innerHTML = error;\n            message.style.color = 'red';\n            setTimeout(() => {\n                message.innerHTML = '';\n            }, 4000);\n            console.log(error);\n        }\n    });\n}\nfunction loginAcount() {\n    var _a, _b, _c;\n    return __awaiter(this, void 0, void 0, function* () {\n        const button = document.querySelector('.login');\n        button.disabled = true;\n        // valor do input da email\n        const shadow_email = (_a = document.querySelector('email-input')) === null || _a === void 0 ? void 0 : _a.shadowRoot;\n        const email = shadow_email === null || shadow_email === void 0 ? void 0 : shadow_email.querySelector('.emailInput');\n        // valor do input nome\n        const shadow_name = (_b = document.querySelector(\"name-input\")) === null || _b === void 0 ? void 0 : _b.shadowRoot;\n        const name = shadow_name === null || shadow_name === void 0 ? void 0 : shadow_name.querySelector('.nameInput');\n        // valor do input senha\n        const shadow_password = (_c = document.querySelector('passwd-input')) === null || _c === void 0 ? void 0 : _c.shadowRoot;\n        const password = shadow_password === null || shadow_password === void 0 ? void 0 : shadow_password.querySelector('.passwordInput');\n        try {\n            if (email.value.length == 0) {\n                throw new Error('Digite um email!');\n            }\n            if (password.value.length == 0) {\n                throw new Error('Digite uma senha!');\n            }\n            const body = {\n                email: email.value,\n                password: password.value\n            };\n            yield fetch_login(body);\n            button.disabled = false;\n        }\n        catch (error) {\n            button.disabled = false;\n            const message = document.querySelector('#message');\n            message.innerHTML = error;\n            message.style.color = 'red';\n            setTimeout(() => {\n                message.innerHTML = '';\n            }, 4000);\n            console.log(error);\n        }\n    });\n}\nfunction fetch_create(body) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const options = {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"Application/json\" },\n                body: JSON.stringify(body)\n            };\n            const response = yield fetch('http://localhost:8000/accounts', options);\n            const json = yield response.json();\n            return json;\n        }\n        catch (error) {\n            console.log(error);\n        }\n    });\n}\nfunction fetch_login(body) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const options = {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"Application/json\" },\n                body: JSON.stringify(body)\n            };\n            const response = yield fetch('http://localhost:8000/accounts/login', options);\n            const json = yield response.json();\n            return json;\n        }\n        catch (error) {\n            console.log(error);\n        }\n    });\n}\nfunction fetch_update(body) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const options = {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"Application/json\" },\n                body: JSON.stringify(body)\n            };\n            const response = yield fetch('http://localhost:8000/accounts', options);\n            const json = yield response.json();\n            return json;\n        }\n        catch (error) {\n            console.log(error);\n        }\n    });\n}\n\n\n//# sourceURL=webpack://ex3/./src/projeto.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/projeto.ts"]();
/******/ 	
/******/ })()
;